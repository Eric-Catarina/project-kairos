This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: Assets/Scripts/**/*.cs
- Files matching these patterns are excluded: Library/, Temp/, Obj/, Build/, Builds/, Logs/, *.log, *.tmp, *.bak, *.cache, *.csproj, *.sln, *.user, *.unityproj, *.pidb, *.booproj, *.svd, *.pdb, *.mdb, *.opendb, *.VC.db, *.pidb.meta, *.pdb.meta, *.mdb.meta, *.opendb.meta, *.VC.db.meta, Assets/Scripts/Player/PlayerControls.cs
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
Assets/
  Scripts/
    AudioManager.cs
    GrapplingHookController.cs
    InputManager.cs
    PlayerLookController.cs
    PlayerMovementController.cs
    UIJuice.cs
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="Assets/Scripts/GrapplingHookController.cs">
// Player/GrapplingHookController.cs

using DG.Tweening;
using UnityEngine;

/// <summary>
/// Gerencia a mecânica de grappling hook, incluindo disparo, puxão, pêndulo e liberação.
/// </summary>
public class GrapplingHookController : MonoBehaviour
{
    [Header("Configurações do Gancho")]
    [SerializeField] private float maxGrappleDistance = 50f;
    [SerializeField] private float grappleCooldown = 1f;
    [SerializeField] private LayerMask grappleLayer;

    [Header("Configurações da Junta (Puxão)")]
    [SerializeField] private float springForce = 4.5f;
    [SerializeField] private float damper = 7f;
    [SerializeField] private float massScale = 4.5f;

    [Header("Configurações do Pêndulo")]
    [SerializeField] private float swingForce = 80f;

    [Header("Efeito de Puxão (DOTween)")]
    [SerializeField] private bool usePullEffect = true;
    [SerializeField] private float pullDuration = 0.5f;
    [SerializeField] private float pullEndPercentage = 0.8f;

    [Header("Referências")]
    [SerializeField] private Transform grappleTip;
    [SerializeField] private Transform mainCamera;
    [SerializeField] private Transform orientation;
    [SerializeField] private LineRenderer lineRenderer;

    private PlayerMovementController _playerMovement;
    private SpringJoint _joint;
    private Vector3 _grapplePoint;
    private Vector2 _moveInput;
    private float _cooldownTimer;
    private bool _isGrappling = false;

    private void Awake()
    {
        _playerMovement = GetComponent<PlayerMovementController>();
    }

    private void OnEnable()
    {
        InputManager.Instance.OnGrappleStarted += StartGrapple;
        InputManager.Instance.OnGrappleCanceled += StopGrapple;
        InputManager.Instance.OnMove += SetMoveInput;
    }

    private void OnDisable()
    {
        if (InputManager.Instance != null)
        {
            InputManager.Instance.OnGrappleStarted -= StartGrapple;
            InputManager.Instance.OnGrappleCanceled -= StopGrapple;
            InputManager.Instance.OnMove -= SetMoveInput;
        }
    }
    
    private void Update()
    {
        if (_cooldownTimer > 0)
        {
            _cooldownTimer -= Time.deltaTime;
        }
    }
    
    private void LateUpdate()
    {
        DrawRope();
    }

    private void FixedUpdate()
    {
        ApplySwingForce();
    }

    private void SetMoveInput(Vector2 moveInput)
    {
        _moveInput = moveInput;
    }

    private void StartGrapple()
    {
        if (_cooldownTimer > 0 || _isGrappling) return;

        if (Physics.Raycast(mainCamera.position, mainCamera.forward, out RaycastHit hit, maxGrappleDistance, grappleLayer))
        {
            _isGrappling = true;
            _grapplePoint = hit.point;

            // Adiciona o SpringJoint para o efeito de puxar
            _joint = gameObject.AddComponent<SpringJoint>();
            _joint.autoConfigureConnectedAnchor = false;
            _joint.connectedAnchor = _grapplePoint;

            float distanceFromPoint = Vector3.Distance(transform.position, _grapplePoint);

            // A distância da junta determina o comprimento da "corda"
            _joint.maxDistance = distanceFromPoint * pullEndPercentage;
            _joint.minDistance = 0;

            // Configurações da mola para um puxão firme mas não totalmente rígido
            _joint.spring = springForce;
            _joint.damper = damper;
            _joint.massScale = massScale;

            lineRenderer.positionCount = 2;

            // Efeito de "zip" opcional com DOTween
            if (usePullEffect)
            {
                DOTween.To(() => _joint.maxDistance, x => _joint.maxDistance = x, distanceFromPoint * 0.1f, pullDuration)
                    .SetEase(Ease.InOutSine);
            }
        }
    }
    
    private void ApplySwingForce()
    {
        if (!_joint) return;

        // Força para frente/trás baseada no input e orientação da câmera
        if (_moveInput.y != 0)
        {
             _playerMovement.Rb.AddForce(orientation.forward * _moveInput.y * swingForce, ForceMode.Force);
        }
       
        // Força para os lados (pêndulo) baseada no input e orientação da câmera
        if (_moveInput.x != 0)
        {
             _playerMovement.Rb.AddForce(orientation.right * _moveInput.x * swingForce, ForceMode.Force);
        }
    }

    public void StopGrapple()
    {
        if (!_isGrappling) return;

        _isGrappling = false;
        _cooldownTimer = grappleCooldown;
        
        lineRenderer.positionCount = 0;
        Destroy(_joint);
        
        // Regra principal: Habilita o pulo duplo APÓS usar o gancho
        _playerMovement.EnableDoubleJump();
    }

    private void DrawRope()
    {
        // Não desenha a corda se não estiver usando o gancho
        if (!_joint) return;

        lineRenderer.SetPosition(0, grappleTip.position);
        lineRenderer.SetPosition(1, _grapplePoint);
    }
}
</file>

<file path="Assets/Scripts/InputManager.cs">
// Player/InputManager.cs

using System;
using UnityEngine;
using UnityEngine.InputSystem;

/// <summary>
/// Gerencia todas as entradas do jogador usando o novo Input System.
/// Implementa um padrão Singleton para fácil acesso.
/// Desacopla a leitura de input da lógica do jogo através de eventos.
/// </summary>
public class InputManager : MonoBehaviour
{
    public static InputManager Instance { get; private set; }

    // Ações para os outros scripts se inscreverem
    public event Action<Vector2> OnMove;
    public event Action<Vector2> OnLook;
    public event Action OnJump;
    public event Action OnGrappleStarted;
    public event Action OnGrappleCanceled;

    private PlayerControls _playerControls;

    private void Awake()
    {
        // Implementação do Singleton
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }
        Instance = this;
        DontDestroyOnLoad(gameObject); // Opcional: manter o input entre cenas

        _playerControls = new PlayerControls();
    }

    private void OnEnable()
    {
        _playerControls.Enable();

        // Inscrevendo os métodos de tratamento aos eventos do Input System
        _playerControls.Player.Move.performed += HandleMove;
        _playerControls.Player.Move.canceled += HandleMove;

        _playerControls.Player.Look.performed += HandleLook;
        _playerControls.Player.Look.canceled += HandleLook;

        _playerControls.Player.Jump.performed += HandleJump;

        _playerControls.Player.Grapple.performed += HandleGrappleStarted;
        _playerControls.Player.Grapple.canceled += HandleGrappleCanceled;
    }

    private void OnDisable()
    {
        _playerControls.Disable();

        _playerControls.Player.Move.performed -= HandleMove;
        _playerControls.Player.Move.canceled -= HandleMove;

        _playerControls.Player.Look.performed -= HandleLook;
        _playerControls.Player.Look.canceled -= HandleLook;

        _playerControls.Player.Jump.performed -= HandleJump;

        _playerControls.Player.Grapple.performed -= HandleGrappleStarted;
        _playerControls.Player.Grapple.canceled -= HandleGrappleCanceled;
    }

    // Métodos que disparam nossos eventos C#
    private void HandleMove(InputAction.CallbackContext context)
    {
        OnMove?.Invoke(context.ReadValue<Vector2>());
    }

    private void HandleLook(InputAction.CallbackContext context)
    {
        OnLook?.Invoke(context.ReadValue<Vector2>());
    }

    private void HandleJump(InputAction.CallbackContext context)
    {
        OnJump?.Invoke();
    }

    private void HandleGrappleStarted(InputAction.CallbackContext context)
    {
        OnGrappleStarted?.Invoke();
    }

    private void HandleGrappleCanceled(InputAction.CallbackContext context)
    {
        OnGrappleCanceled?.Invoke();
    }
}
</file>

<file path="Assets/Scripts/PlayerLookController.cs">
// Player/PlayerLookController.cs

using UnityEngine;

/// <summary>
/// Controla a rotação da câmera, a orientação de movimento e a rotação visual do jogador.
/// </summary>
public class PlayerLookController : MonoBehaviour
{
    [Header("Configurações de Sensibilidade")]
    [SerializeField] private float sensitivityX = 200f;
    [SerializeField] private float sensitivityY = 200f;
    [SerializeField] private float rotationSpeed = 10f;

    [Header("Referências")]
    [Tooltip("O objeto que a Cinemachine segue. Geralmente o próprio Player.")]
    [SerializeField] private Transform cameraFollowTarget;
    [Tooltip("O modelo visual do jogador que deve rotacionar.")]
    [SerializeField] private Transform playerModel; 
    [Tooltip("Um objeto vazio filho do Player que define a direção do movimento.")]
    [SerializeField] private Transform orientation;

    private Vector2 _lookInput;
    private float _xRotation;
    private float _yRotation;

    private void OnEnable()
    {
        if (InputManager.Instance != null)
        {
            InputManager.Instance.OnLook += SetLookInput;
        }
    }

    private void OnDisable()
    {
        if (InputManager.Instance != null)
        {
            InputManager.Instance.OnLook -= SetLookInput;
        }
    }

    private void Start()
    {
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }

    private void Update()
    {
        HandleRotation();
    }
    
    private void HandleRotation()
    {
        float mouseX = _lookInput.x * sensitivityX * Time.deltaTime;
        float mouseY = _lookInput.y * sensitivityY * Time.deltaTime;

        _yRotation += mouseX;
        _xRotation -= mouseY;
        _xRotation = Mathf.Clamp(_xRotation, -90f, 90f); 

        // Aplica a rotação ao alvo da câmera e ao objeto de orientação
        cameraFollowTarget.rotation = Quaternion.Euler(_xRotation, _yRotation, 0);
        orientation.rotation = Quaternion.Euler(0, _yRotation, 0);

        // Rotaciona suavemente o modelo do jogador para corresponder à orientação
        if (playerModel != null)
        {
            playerModel.rotation = Quaternion.Slerp(playerModel.rotation, orientation.rotation, rotationSpeed * Time.deltaTime);
        }
    }

    private void SetLookInput(Vector2 lookInput)
    {
        _lookInput = lookInput;
    }
}
</file>

<file path="Assets/Scripts/PlayerMovementController.cs">
// Player/PlayerMovementController.cs

using UnityEngine;

/// <summary>
/// Gerencia toda a física de movimento do jogador: andar, pular, gravidade e momentum.
/// </summary>
[RequireComponent(typeof(Rigidbody))]
public class PlayerMovementController : MonoBehaviour
{
    [Header("Estado do Jogador")]
    [SerializeField] private bool _isGrounded;
    [SerializeField] private bool _canDoubleJump;

    [Header("Configurações de Movimento")]
    [SerializeField] private float moveSpeed = 7f;
    [SerializeField] private float groundDrag = 5f;
    [SerializeField] private float airDrag = 0.5f;
    [SerializeField] private float airMultiplier = 0.4f;

    [Header("Configurações de Pulo")]
    [SerializeField] private float jumpForce = 12f;
    [SerializeField] private float gravityMultiplier = 2.5f;

    [Header("Verificação de Chão")]
    [SerializeField] private float playerHeight = 2f;
    [SerializeField] private LayerMask groundLayer;

    [Header("Referências")]
    [SerializeField] private Transform orientation;

    private Rigidbody _rb;
    private Vector2 _moveInput;
    private Vector3 _moveDirection;

    public bool IsGrounded => _isGrounded;
    public Rigidbody Rb => _rb;

    private void Awake()
    {
        _rb = GetComponent<Rigidbody>();
        _rb.freezeRotation = true;
    }
    
    private void OnEnable()
    {
        InputManager.Instance.OnMove += SetMoveInput;
        InputManager.Instance.OnJump += HandleJump;
    }

    private void OnDisable()
    {
        if (InputManager.Instance != null)
        {
            InputManager.Instance.OnMove -= SetMoveInput;
            InputManager.Instance.OnJump -= HandleJump;
        }
    }

    private void Update()
    {
        CheckGroundedStatus();
        ApplyDrag();
        LimitVelocity();
    }

    private void FixedUpdate()
    {
        MovePlayer();
        ApplyExtraGravity();
    }
    
    private void SetMoveInput(Vector2 moveInput)
    {
        _moveInput = moveInput;
    }

    private void CheckGroundedStatus()
    {
        _isGrounded = Physics.Raycast(transform.position, Vector3.down, playerHeight * 0.5f + 0.2f, groundLayer);

        if (_isGrounded)
        {
            _canDoubleJump = false;
        }
    }

    private void ApplyDrag()
    {
        _rb.linearDamping = _isGrounded ? groundDrag : airDrag;
    }

    private void MovePlayer()
    {
        _moveDirection = orientation.forward * _moveInput.y + orientation.right * _moveInput.x;
        _moveDirection.Normalize();

        float speed = moveSpeed;
        float forceMultiplier = _isGrounded ? 1f : airMultiplier;

        _rb.AddForce(_moveDirection * speed * forceMultiplier, ForceMode.Force);
    }
    
    private void LimitVelocity()
    {
        // ALTERADO: Usando linearVelocity
        Vector3 flatVel = new Vector3(_rb.linearVelocity.x, 0f, _rb.linearVelocity.z);

        if (flatVel.magnitude > moveSpeed)
        {
            Vector3 limitedVel = flatVel.normalized * moveSpeed;
            // ALTERADO: Usando linearVelocity
            _rb.linearVelocity = new Vector3(limitedVel.x, _rb.linearVelocity.y, limitedVel.z);
        }
    }

    private void HandleJump()
    {
        if (_isGrounded)
        {
            Jump();
        }
        else if (_canDoubleJump)
        {
            Jump();
            _canDoubleJump = false;
        }
    }

    private void Jump()
    {
        // ALTERADO: Usando linearVelocity
        _rb.linearVelocity = new Vector3(_rb.linearVelocity.x, 0f, _rb.linearVelocity.z);
        _rb.AddForce(transform.up * jumpForce, ForceMode.Impulse);
    }

    private void ApplyExtraGravity()
    {
        if (!_isGrounded)
        {
            _rb.AddForce(Vector3.down * (gravityMultiplier - 1) * Physics.gravity.y, ForceMode.Acceleration);
        }
    }

    public void EnableDoubleJump()
    {
        _canDoubleJump = true;
    }
}
</file>

<file path="Assets/Scripts/AudioManager.cs">
using UnityEngine;
using System.Collections.Generic;

public class AudioManager : MonoBehaviour
{
    public static AudioManager Instance { get; private set; }

    [Header("Músicas")]
    [Tooltip("Lista de músicas de fundo disponíveis.")]
    public List<AudioClip> backgroundMusicClips = new List<AudioClip>(); // Lista de músicas
    public AudioSource bgmAudioSource;

    [Header("Efeitos Sonoros")]
    public AudioSource sfxAudioSource;
    [Tooltip("Lista dos clipes de áudio dos efeitos sonoros.")]
    public List<AudioClip> soundEffectClips;

    private const float PITCH_VARIATION_PERCENTAGE = 0.10f; // 10%

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void Start()
    {
        // Exemplo: Inicia a música do menu ao carregar a cena inicial
        PlayBackgroundMusic(0); // Assume que a música do menu é o primeiro clipe na lista
    }

    /// <summary>
    /// Toca uma música de fundo específica da lista.
    /// </summary>
    /// <param name="musicIndex">O índice da música na lista 'backgroundMusicClips'.</param>
    public void PlayBackgroundMusic(int musicIndex)
    {
        if (bgmAudioSource == null || backgroundMusicClips.Count == 0)
        {
            Debug.LogWarning("AudioManager: bgmAudioSource não atribuído ou lista de músicas vazia.");
            return;
        }

        if (musicIndex < 0 || musicIndex >= backgroundMusicClips.Count || backgroundMusicClips[musicIndex] == null)
        {
            Debug.LogWarning($"AudioManager: Índice de música inválido ({musicIndex}).");
            return;
        }

        bgmAudioSource.clip = backgroundMusicClips[musicIndex];
        bgmAudioSource.loop = true;
        ApplyRandomPitch(bgmAudioSource);
        bgmAudioSource.Play();
    }

    /// <summary>
    /// Para a música de fundo.
    /// </summary>
    public void StopBackgroundMusic()
    {
        if (bgmAudioSource != null)
        {
            bgmAudioSource.Stop();
        }
    }

    /// <summary>
    /// Toca um efeito sonoro específico da lista.
    /// </summary>
    /// <param name="sfxIndex">O índice do efeito sonoro na lista 'soundEffectClips'.</param>
    /// <param name="volumeScale">Escala de volume opcional para este efeito sonoro (padrão é 1.0f).</param>
    public void PlaySoundEffect(int sfxIndex, float volumeScale = 1.0f)
    {
        if (sfxAudioSource == null)
        {
            Debug.LogWarning("AudioManager: sfxAudioSource não foi atribuído. Efeito sonoro não pode ser tocado.");
            return;
        }

        if (sfxIndex < 0 || sfxIndex >= soundEffectClips.Count || soundEffectClips[sfxIndex] == null)
        {
            Debug.LogWarning($"AudioManager: Índice de efeito sonoro inválido ({sfxIndex}) ou clipe de áudio não atribuído.");
            return;
        }

        ApplyRandomPitch(sfxAudioSource);
        sfxAudioSource.PlayOneShot(soundEffectClips[sfxIndex], volumeScale);
    }

    public void PlayConfettiSound()
    {
        if (sfxAudioSource == null)
        {
            Debug.LogWarning("AudioManager: sfxAudioSource não foi atribuído. Efeito sonoro de confete não pode ser tocado.");
            return;
        }

        AudioClip confettiClip = soundEffectClips.Find(clip => clip.name.Contains("Confetti"));
        if (confettiClip != null)
        {
            ApplyRandomPitch(sfxAudioSource);
            sfxAudioSource.PlayOneShot(confettiClip);
        }
        else
        {
            Debug.LogWarning("AudioManager: Clip de confete não encontrado na lista de efeitos sonoros.");
        }
    }

    public void PlaySoundEffectClip(AudioClip clip, float volumeScale = 1.0f)
  {
    if (sfxAudioSource == null)
    {
      Debug.LogWarning("AudioManager: sfxAudioSource não foi atribuído. Efeito sonoro não pode ser tocado.");
      return;
    }

    if (clip == null)
    {
      Debug.LogWarning("AudioManager: Clip de áudio é nulo. Efeito sonoro não pode ser tocado.");
      return;
    }

    ApplyRandomPitch(sfxAudioSource);
    sfxAudioSource.PlayOneShot(clip, volumeScale);
  }

    private void ApplyRandomPitch(AudioSource audioSource)
  {
    float randomPitch = Random.Range(1f - PITCH_VARIATION_PERCENTAGE, 1f + PITCH_VARIATION_PERCENTAGE);
    audioSource.pitch = randomPitch;
  }
}
</file>

<file path="Assets/Scripts/UIJuice.cs">
using UnityEngine;
using UnityEngine.Events;
using DG.Tweening;

[RequireComponent(typeof(CanvasGroup))]
public class UIJuice : MonoBehaviour
{
    [Header("Configurações de Animação")]
    [SerializeField] protected float duration = 0.5f;
    [SerializeField] protected float delay = 0f;
    [SerializeField] protected Ease easeType = Ease.OutBack;
    [SerializeField] private Vector3 startScale = new Vector3(0.8f, 0.8f, 0.8f);

    [Header("Comportamento")]
    [SerializeField] protected bool playOnEnable = false;

    [Header("Eventos de Animação")]
    [Tooltip("Disparado quando a animação de entrada começa.")]
    public UnityEvent OnPlayStart;

    [Tooltip("Disparado quando a animação de entrada é concluída.")]
    public UnityEvent OnPlayComplete;

    [Tooltip("Disparado quando a animação de saída começa.")]
    public UnityEvent OnReverseStart;

    [Tooltip("Disparado quando a animação de saída é concluída.")]
    public UnityEvent OnReverseComplete;

    private CanvasGroup canvasGroup;
    private RectTransform rectTransform;
    private Sequence sequence;

    private void Awake()
    {
        canvasGroup = GetComponent<CanvasGroup>();
        rectTransform = GetComponent<RectTransform>();
    }

    protected virtual void OnEnable()
    {
        if (playOnEnable)
        {
            PlayAnimation();
        }
    }

    /// <summary>
    /// Deixa o painel ativo e inicia a animação de entrada.
    /// Útil para chamar a partir de botões ou outros scripts.
    /// </summary>
    public void SetActiveAndPlay()
    {
        gameObject.SetActive(true);
        PlayAnimation();
    }

    /// <summary>
    /// Inicia a animação de "entrada" (por exemplo, abrir uma tela).
    /// </summary>
    public virtual void PlayAnimation()
    {
        KillExistingSequence();
        CreateForwardSequence();

        if (sequence != null)
        {
            sequence.OnStart(() => OnPlayStart?.Invoke());
            sequence.OnComplete(() => OnPlayComplete?.Invoke());
            sequence.Play();
        }
    }

    /// <summary>
    /// Inicia a animação de "saída" (por exemplo, fechar uma tela).
    /// </summary>
    public virtual void PlayReverseAnimation()
    {
        KillExistingSequence();
        CreateReverseSequence();

        if (sequence != null)
        {
            sequence.OnStart(() => OnReverseStart?.Invoke());
            sequence.OnComplete(() => OnReverseComplete?.Invoke());
            sequence.Play();
        }
    }

    /// <summary>
    /// Cria a sequência de animação de entrada (aparecer/abrir).
    /// </summary>
    private void CreateForwardSequence()
    {
        gameObject.SetActive(true);
        canvasGroup.blocksRaycasts = true;

        // Define o estado inicial antes da animação
        canvasGroup.alpha = 0f;
        rectTransform.localScale = startScale;

        sequence = DOTween.Sequence();

        if (delay > 0)
        {
            sequence.AppendInterval(delay);
        }

        sequence.Append(canvasGroup.DOFade(1f, duration).SetEase(easeType));
        sequence.Join(rectTransform.DOScale(Vector3.one, duration).SetEase(easeType));

        // Pausa a sequência para que o método Play() possa controlá-la
        sequence.Pause();
    }

    /// <summary>
    /// Cria a sequência de animação de saída (desaparecer/fechar).
    /// </summary>
    private void CreateReverseSequence()
    {
        // Impede cliques durante a animação de saída
        canvasGroup.blocksRaycasts = false;

        sequence = DOTween.Sequence();

        // O delay não é aplicado na animação reversa por padrão, mas pode ser adicionado se necessário
        sequence.Append(canvasGroup.DOFade(0f, duration).SetEase(Ease.InBack));
        sequence.Join(rectTransform.DOScale(startScale, duration).SetEase(Ease.InBack));
        sequence.OnComplete(() => gameObject.SetActive(false)); // Desativa o objeto ao final

        // Pausa a sequência para que o método Play() possa controlá-la
        sequence.Pause();
    }

    /// <summary>
    /// Para e destrói qualquer sequência de animação ativa para evitar sobreposições.
    /// </summary>
    private void KillExistingSequence()
    {
        if (sequence != null && sequence.IsActive())
        {
            sequence.Kill();
        }
    }

    protected virtual void OnDestroy()
    {
        KillExistingSequence();
    }
}
</file>

</files>
